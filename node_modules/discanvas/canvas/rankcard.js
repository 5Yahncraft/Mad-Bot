const { createCanvas, loadImage } = require('canvas');

/*
By squarfiuz
My Youtube Channel : https://www.youtube.com/channel/UC2ACluqDgpeNbexpdaTACmw
My Instagram : https://www.instagram.com/squarfiuz/
My Discord : https://discord.gg/SgfzZPckVT
*/

module.exports = class RankCard {
    constructor() {
        this.avatar = 'https://cdn.discordapp.com/embed/avatars/0.png'
        this.level = 1
        this.currentXP = 100
        this.requiredXP = 200
        this.progressBar = '#ff5555'
        this.username = 'username'
        this.top = 1
        this.background = null
        this.backgroundColor = null
        this.squareOpacity = 0.7
        this.borderColor = '#ff5555'
        this.discriminator = '#0000'
        this.status = '#747f8d'
    }
    setAvatar(value) {
        this.avatar = value;
        return this;
    }
    setLevel(value) {
        this.level = value;
        return this;
    }
    setCurrentXP(value) {
        this.currentXP = value;
        return this;
    }
    setRequiredXP(value) {
        this.requiredXP = value;
        return this;
    }
    setProgressBar(value) {
        this.progressBar = value;
        return this;
    }
    setTop(value) {
        this.top = value;
        return this;
    }
    setUsername(value) {
        this.username = value;
        return this;
    }
    setDiscriminator(value) {
        this.discriminator = value;
        return this;
    }
    setBackground(type, value) {
        if(type == 'BACKGROUND'){
            if(!value)throw 'You must give a background URL as a second argument.';
            this.background = value;     
            return this;
        }else if(type == 'COLOR'){
            if(!value)throw 'You must give a hexadecimal color as a second argument.';
            this.backgroundColor = value;
            return this;
        }else{
            throw 'The first argument of .setBackground must be "COLOR" or "BACKGROUND".';
        }
    }
    setSquareOpacity(value) {
        this.squareOpacity = value;
        return this;
    }
    setBorderColor(value) {
        this.borderColor = value;
        return this;
    }
    setStatus(value) {
        this.status = value === 'online' ? '#3ba55c' : value === 'idle' ? '#faa61a' : value === 'dnd' ? '#ed4245' : value === 'stream' ? '#593695' : '#747f8d'
        return this;
    }

    async toCard() {
        const xpBarre = Math.floor(this.currentXP / this.requiredXP * 490);

        const canvas = createCanvas(800, 300);
        const ctx = canvas.getContext('2d');

        if(this.background){
            ctx.drawImage(await loadImage(this.background), 0, 0, canvas.width, canvas.height);
        }

        if (this.backgroundColor) {
            ctx.beginPath();
            ctx.fillStyle = this.backgroundColor;
            ctx.fillRect(0, 0, canvas.width, canvas.height)
        }

        if(this.borderColor){
            ctx.strokeStyle = this.borderColor;
            ctx.strokeRect(0, 0, canvas.width, canvas.height);
        }

        ctx.beginPath();
        ctx.fillStyle = '#000';
        ctx.globalAlpha = this.squareOpacity;
        ctx.fillRect(20, 20, 760, 260);
        ctx.closePath();

        ctx.globalAlpha = 1;
        ctx.font = '35px "Roboto Black"';
        ctx.fillStyle = '#fff';
        if(this.username.length > 15){
            ctx.fillText(`${this.username.slice(0, 15) + '...' + '#' + this.discriminator}`, 240, 125);
        }else{
            ctx.fillText(this.username + '#' + this.discriminator, 240, 125);
        }

        ctx.globalAlpha = 1;
        ctx.font = '38px "Roboto Black"';
        ctx.fillStyle = '#fff';
        ctx.fillText('Level : ' + this.level, 560, 65);
        
        ctx.globalAlpha = 1;
        ctx.font = '38px "Roboto Black"';
        ctx.fillStyle = '#fff';
        ctx.fillText('Rank : ' + this.top, 350, 65);

        ctx.beginPath();
        ctx.globalAlpha = 1;
        ctx.lineWidth = 2;
        ctx.fillStyle = '#fff';
        ctx.moveTo(220, 135);
        ctx.lineTo(690, 135);
        ctx.quadraticCurveTo(710, 135, 710, 152.5);  
        ctx.quadraticCurveTo(710, 170, 690, 170);
        ctx.lineTo(220, 170);
        ctx.lineTo(220, 135);
        ctx.fill();
        ctx.closePath();

        ctx.beginPath();
        ctx.globalAlpha = 1;
        ctx.lineWidth = 2;
        ctx.fillStyle = this.progressBar;
        ctx.moveTo(220, 135);
        ctx.lineTo(200 + xpBarre, 135);
        ctx.quadraticCurveTo(220 + xpBarre, 135, 220 + xpBarre, 152.5); 
        ctx.quadraticCurveTo(220 + xpBarre, 170, 200 + xpBarre, 170); 
        ctx.lineTo(220, 170);
        ctx.lineTo(220, 135);
        ctx.fill();
        ctx.font = '28px "Roboto Black"';
        ctx.fillStyle = '#000';
        ctx.fillText(this.currentXP + ' / ' + this.requiredXP + ' xp', 240, 162)
        ctx.closePath();

        ctx.beginPath();
        ctx.arc(130, 150, 95, 0, Math.PI * 2);
        ctx.fillStyle = this.status;
        ctx.globalAlpha = 1;
        ctx.fill();
        ctx.closePath();

        ctx.beginPath();
        ctx.arc(130, 150, 90, 0, Math.PI * 2);
        ctx.closePath();
        ctx.clip();

        ctx.drawImage(await loadImage(this.avatar), 40, 60, 180, 180);
        return canvas;
    }
};